Современные версии Unix позволяют отображать ресурсы хранения данных (файлы или устройства) в адресное пространство процесса(все виртуальные ячейки памяти к которым может ссылаться или обращаться программа). 

Такое отображение осуществляется припомощи диспетчера памяти(аппаратная часть, преобразующая виртуальные адреса в изические). 

Система устанавливает в дескрипторах всех страниц отображённой памяти бит отсутствия. При первом обращении к такой странице, диспетчер памяти генерирует страничный отказ (исключение отсутствия страницы).
Ядро системы перехватывает это исключение , считывает страницу из файла или с устройства, снимает бит отсутствия в дескрипторе
страницы и возвращает управление программе.
Это позволяет получать доступ к содержимому файла или устройства как к
массиву байт в адресном пространстве процесса.



Процесс представляет собой исполняющуюся программу вместе с необходимым ейокружением. Окружение процесса состоит из:
. информации о процессе, содержащейся в различных системных структурах данных
. содержимого регистров процессора (контекста процесса)
. пользовательского стека процесса и системного стека, используемого при обработке системных вызовов
. пользовательской области, которая содержит информацию об открытых файлах, текущей директории, обработке сигналов и т.д.

Образ процесса есть размещение процесса в памяти в заданный момент времени. Образ процесса представляет собой набор отображённых в виртуальную память сегментов, представляющих собой код основной программы, сегмент данных, сегменты кода и данных
разделяемых библиотек, отображённые на память файлы, сегменты разделяемой памяти и др. Обратите внимание, что программа является частью образа процесса.

Отображённые в память сегменты не обязаны быть загружены полностью и подкачиваются с диска по мере необходимости, а также сегменты кода и неизмененные части сегментов данных у различных процессов могут
размещаться в разделяемой памяти, общий объем образов всех процессов в системе может превосходить объем физического ОЗУ.

Каждый процесс имеет собственное виртуальное адресное пространство и, таким образом, защищён от ошибок и злонамеренных действий кода, запущенного другими пользователями.
