#include <stdio.h>
#include <stdlib.h>
#include <mpi.h>
#include <math.h>

#define SEND_X 0
#define SEND_B 1
#define SEND_A 2
#define T 0.01
#define EPS 0.00001

//c
void computeC(double* A, double* x, double* b, double* C, int countLine, int N, int partB)
{
    double* Ax = (double*) calloc(countLine, sizeof(double));
    for(int i = 0 ; i < countLine; ++i)
    {
        for(int j = 0; j < N; ++j)
        {
            Ax[i] += A[i*N + j] * x[j];
        }
    }
    for(int i = 0; i < countLine; ++i)
    {
        C[i] = Ax[i] - b[partB + i];
    }
    free(Ax);
}

int conditionIsSatisfied(double normB, double normC)
{
    //printf("% lf " , normC / normB );
    if(normC / normB > EPS)
    {
        return 1;
    }
    else
    {
        return 0;
    }
}

double computeNormB(double* b, int size)
{
    double normB = 0;
    for(int i = 0; i < size; ++i)
    {
        normB += b[i]*b[i];
    }
    return sqrt(normB);
}

void printDoubleVector(double* v, int N, int rank)
{
    for(int i = 0; i < N; ++i)
    {
        printf("%.4lf(%d,x) ", v[i], rank);
    }
    printf("\n");
    printf("\n");
}
void printIntVector(int* v, int N, int rank)
{
    for(int i = 0; i < N; ++i)
    {
        printf("%d(%d, i= %d)", v[i], rank, i);
    }
    printf("\n");
    printf("\n");
}

int main (int argc, char** argv)
{
  MPI_Init (&argc, &argv);
  int rank;
  int processNumber;
  int N;
  MPI_Comm_size (MPI_COMM_WORLD, &processNumber);
  MPI_Comm_rank (MPI_COMM_WORLD, &rank);

  /*if(3 != argc)
  {
      printf("Enter size of matrix and path to config file.");
      return 0;
  }
  N = atoi(argv[1]);*/
  N = 8;

  double* x = (double*) malloc(N * sizeof(double));
  double* b = (double*) malloc(N * sizeof(double));
  double* A;
  int bigPartNumber = N % processNumber;
  int rowsInPart = N / processNumber;
  int rowsInBigPart = 0;
  if(0 != bigPartNumber)
  {
      rowsInBigPart = rowsInPart + 1;
  }
  int* recvCount = (int*) malloc(processNumber * sizeof(int));
  int* displs = (int*) malloc(processNumber * sizeof(int));
//set displs and recvCount
  displs[0] = 0;
  recvCount[0] = rowsInBigPart;
  for (int i = 1; i < bigPartNumber; ++i)
  {
      recvCount[i] = rowsInBigPart;
      displs[i] = displs[i - 1] + recvCount[i - 1];
  }
  for (int i = bigPartNumber; i < processNumber; ++i)
  {
      recvCount[i] = rowsInPart;
     displs[i] = displs[i - 1] + recvCount[i - 1];
  }


  if(0 == rank)
  {
      FILE* input;
      input = fopen("/home/nastya/NSU/MPI+OpenMP/Lab1/input.txt", "r");
      //FILE* input = fopen(argv[2], "r");
      double* Matrix = (double*) malloc(N * N * sizeof(double));
      //read matrix
      for(int i = 0; i < N; ++i)
      {
          for(int j = 0; j < N; ++j)
          {
              fscanf(input, "%lf", &Matrix[i * N + j]);

          }
      }
      //read vector x
      for(int i = 0; i < N; ++i)
      {
          fscanf(input, "%lf", &x[i]);
      }
      //read vector b
      for(int i = 0; i < N; ++i)
      {
          fscanf(input, "%lf", &b[i]);
      }
      //send b
      for(int i = 1; i < processNumber - 1; ++i)
      {
          MPI_Send(b, N, MPI_DOUBLE, i, SEND_B, MPI_COMM_WORLD);
      }
      //send x
      for(int i = 1; i < processNumber - 1; ++i)
      {
          MPI_Send(x, N, MPI_DOUBLE, i, SEND_X, MPI_COMM_WORLD);
      };
      //send parts of A
      for (int i = 1; i < processNumber; ++i)
      {
          MPI_Send(&Matrix[displs[i]*N], recvCount[i] * N, MPI_DOUBLE, i, SEND_A, MPI_COMM_WORLD);
      }
      A = malloc(recvCount[0] * N * sizeof(double));
      for(int i = 0; i < recvCount[0] * N; ++i)
      {
          A[i] = Matrix[i];
      }
      free(Matrix);
  }

//for debug
 /*   for(int i = 0; i < N; ++i)
      {
          for(int j = 0; j < N; ++j)
          {
              printf("%0.2lf ", A[i*N + j]);
          }
          printf("\n");
      }

      for(int i = 0; i < N; ++i)
      {
          printf("%.2lf ", x[i]);
      }
      printf("\n");
      for(int i = 0; i < N; ++i)
      {
          printf("%.2lf ", b[i]);
      }

  printf("recvCount:");
  printIntVector(recvCount, processNumber, rank);
  MPI_Barrier(MPI_COMM_WORLD);
  printf("displs:");
  printIntVector(displs, processNumber, rank);
  MPI_Barrier(MPI_COMM_WORLD);*/

  int lenghtOfPartA = recvCount[rank] * N;
  if(rank != 0)
  {

      MPI_Recv(x, N, MPI_DOUBLE, 0, SEND_X, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
      MPI_Recv(b, N, MPI_DOUBLE, 0, SEND_B, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
      A = malloc(lenghtOfPartA * sizeof(double));
      MPI_Recv(A, lenghtOfPartA, MPI_DOUBLE, 0, SEND_A, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
      if(2 == rank)
      {
          printf("i2");
          printDoubleVector(x, N, rank);
          printDoubleVector(b, N, rank);
          printDoubleVector(A, lenghtOfPartA, rank);
      }
      /*     for(int i = 0; i < lenghtOfPartA; ++i)
      {
          printf("%.2lf(%d,x) ", A[i], rank);
      }
      printf("\n");
      for(int i = 0; i < N; ++i)
      {
          printf("%.2lf(%d,x) ", x[i], rank);
      }
      printf("\n");
      for(int i = 0; i < N; ++i)
      {

          printf("%.2lf(%d,b) ", b[i], rank);
      }
      */


  }

/*
  double normB;
  double generalNormC;
  int count = 0;
  do
  {
      count++;
      printf("%d \n", count);
      int countLine = recvCount[rank];
      double* C = (double*) malloc(countLine * sizeof(double));
      computeC(A, x, b, C, countLine, N, displs[rank]*N);
      //printDoubleVector(C, N, rank);
      double* tC = (double*) malloc(countLine * sizeof(double));
      for(int i = 0; i < countLine; ++i)
      {
          tC[i] = C[i] * T;
      }
      //printDoubleVector(tC, N, rank);

      //substruction: x = x - tc
      for(int i = 0; i < countLine; ++i)
      {
          x[displs[rank]*N + i] -= tC[i];
      }

      double* recvBuf = (double*) malloc(N * sizeof(double));

      MPI_Allgatherv(&x[displs[rank]*N], recvCount[rank], MPI_DOUBLE, recvBuf, recvCount, displs, MPI_DOUBLE, MPI_COMM_WORLD);
      double localNormC = 0;
      for(int i = 0; i < countLine; ++i)
      {
          localNormC += C[i]*C[i];
      }
      //printf(" lc = %lf  ", localNormC);
      MPI_Allreduce(&localNormC, &generalNormC, 1, MPI_DOUBLE, MPI_SUM, MPI_COMM_WORLD);
      generalNormC = sqrt(generalNormC);
            //printf(" gc = %lf  ", generalNormC);
      normB = computeNormB(b, N);
  }
  while(conditionIsSatisfied(normB, generalNormC));
*/
  //printDoubleVector(x, N, rank);

  MPI_Finalize();
    printf("end\n");
  return 0;
}

